
#ifndef __FM_RADIO_H__
#define __FM_RADIO_H__

#include <math.h>

#define _VC_

// quantization
#define BITS            10
#define QUANT_VAL       (1 << BITS)
#define QUANTIZE_F(f)   (int)(((float)(f) * (float)QUANT_VAL))
#define QUANTIZE_I(i)   (int)((int)(i) * (int)QUANT_VAL)
#define DEQUANTIZE(i)   (int)((int)(i) / (int)QUANT_VAL)

// constants
#define PI              3.1415926535897932384626433832795f
#define ADC_RATE        64000000 // 64 MS/s
#define USRP_DECIM      250
#define QUAD_RATE       (int)(ADC_RATE / USRP_DECIM) // 256 kS/s
#define AUDIO_DECIM     8
#define AUDIO_RATE      (int)(QUAD_RATE / AUDIO_DECIM) // 32 kHz
#define VOLUME_LEVEL    QUANTIZE_F(1.0f)
#define SAMPLES         65536*4
#define AUDIO_SAMPLES   (int)(SAMPLES / AUDIO_DECIM)
#define MAX_TAPS        32 
#define MAX_DEV         55000.0f
#define FM_DEMOD_GAIN   QUANTIZE_F( (float)QUAD_RATE / (2.0f * PI * MAX_DEV) )
#define TAU             0.000075f
#define W_PP            0.21140067f //tan( 1.0f / ((float)AUDIO_RATE*2.0f*TAU) )

void fm_radio_stereo( unsigned char *IQ, int *left_audio, int *right_audio );

void read_IQ( unsigned char *IQ, int *I, int *Q, int samples );

void demodulate_n( int *real, int *imag, int *real_prev, int *imag_prev, const int n_samples, const int gain, int *demod_out );

void demodulate( int real, int imag, int *real_prev, int *imag_prev, const int gain, int *demod_out );

void deemphasis_n( int *input, int *x, int *y, const int n_samples, int *output );

void iir_n( int *x_in, const int n_samples, const int *x_coeffs, const int *y_coeffs, int *x, int *y, const int taps, int decimation, int *y_out );

void iir( int *x_in, const int *x_coeffs, const int *y_coeffs, int *x, int *y, const int taps, const int decimation, int *y_out );

void fir_n( int *x_in, const int n_samples, const int *coeff, int *x, const int taps, const int decimation, int *y_out ); 

void fir( int *x_in, const int *coeff, int *x, const int taps, const int decimation, int *y_out ); 

void fir_cmplx_n( int *x_real_in, int *x_imag_in, const int n_samples, const int *h_real, const int *h_imag, int *x_real, int *x_imag,  
                  const int taps, const int decimation, int *y_real_out, int *y_imag_out );

void fir_cmplx( int *x_real_in, int *x_imag_in, const int *h_real, const int *h_imag, int *x_real, int *x_imag, 
                const int taps, const int decimation, int *y_real_out, int *y_imag_out );

void gain_n( int *input, const int n_samples, int gain, int *output );

int qarctan(int y, int x);

void multiply_n( int *x_in, int *y_in, const int n_samples, int *output );

void add_n( int *x_in, int *y_in, const int n_samples, int *output );

void sub_n( int *x_in, int *y_in, const int n_samples, int *output );


// Deemphasis IIR Filter Coefficients: 
static const int IIR_COEFF_TAPS = 2;
static const int IIR_Y_COEFFS[] = {QUANTIZE_F(0.0f), QUANTIZE_F((W_PP - 1.0f) / (W_PP + 1.0f))};
static const int IIR_X_COEFFS[] = {QUANTIZE_F(W_PP / (1.0f + W_PP)), QUANTIZE_F(W_PP / (1.0f + W_PP))};

// Channel low-pass complex filter coefficients @ 0kHz to 80kHz
static const int CHANNEL_COEFF_TAPS = 20;
static const int CHANNEL_COEFFS_REAL[] =
{
	0x00000001, 0x00000008, 0xfffffff3, 0x00000009, 0x0000000b, 0xffffffd3, 0x00000045, 0xffffffd3, 
	0xffffffb1, 0x00000257, 0x00000257, 0xffffffb1, 0xffffffd3, 0x00000045, 0xffffffd3, 0x0000000b, 
	0x00000009, 0xfffffff3, 0x00000008, 0x00000001
};

static const int CHANNEL_COEFFS_IMAG[] =
{
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000
};

// L+R low-pass filter coefficients @ 15kHz
static const int AUDIO_LPR_COEFF_TAPS = 32;
static const int AUDIO_LPR_COEFFS[] =
{
	0xfffffffd, 0xfffffffa, 0xfffffff4, 0xffffffed, 0xffffffe5, 0xffffffdf, 0xffffffe2, 0xfffffff3, 
	0x00000015, 0x0000004e, 0x0000009b, 0x000000f9, 0x0000015d, 0x000001be, 0x0000020e, 0x00000243, 
	0x00000243, 0x0000020e, 0x000001be, 0x0000015d, 0x000000f9, 0x0000009b, 0x0000004e, 0x00000015, 
	0xfffffff3, 0xffffffe2, 0xffffffdf, 0xffffffe5, 0xffffffed, 0xfffffff4, 0xfffffffa, 0xfffffffd
};

// L-R low-pass filter coefficients @ 15kHz, gain = 60
static const int AUDIO_LMR_COEFF_TAPS = 32;
static const int AUDIO_LMR_COEFFS[] =
{
	0xfffffffd, 0xfffffffa, 0xfffffff4, 0xffffffed, 0xffffffe5, 0xffffffdf, 0xffffffe2, 0xfffffff3, 
	0x00000015, 0x0000004e, 0x0000009b, 0x000000f9, 0x0000015d, 0x000001be, 0x0000020e, 0x00000243, 
	0x00000243, 0x0000020e, 0x000001be, 0x0000015d, 0x000000f9, 0x0000009b, 0x0000004e, 0x00000015, 
      0xfffffff3, 0xffffffe2, 0xffffffdf, 0xffffffe5, 0xffffffed, 0xfffffff4, 0xfffffffa, 0xfffffffd
};

// Pilot tone band-pass filter @ 19kHz
static const int BP_PILOT_COEFF_TAPS = 32;
static const int BP_PILOT_COEFFS[] =
{
	0x0000000e, 0x0000001f, 0x00000034, 0x00000048, 0x0000004e, 0x00000036, 0xfffffff8, 0xffffff98, 
	0xffffff2d, 0xfffffeda, 0xfffffec3, 0xfffffefe, 0xffffff8a, 0x0000004a, 0x0000010f, 0x000001a1, 
	0x000001a1, 0x0000010f, 0x0000004a, 0xffffff8a, 0xfffffefe, 0xfffffec3, 0xfffffeda, 0xffffff2d, 
	0xffffff98, 0xfffffff8, 0x00000036, 0x0000004e, 0x00000048, 0x00000034, 0x0000001f, 0x0000000e
};

// L-R band-pass filter @ 23kHz to 53kHz
static const int BP_LMR_COEFF_TAPS = 32;
static const int BP_LMR_COEFFS[] =
{
	0x00000000, 0x00000000, 0xfffffffc, 0xfffffff9, 0xfffffffe, 0x00000008, 0x0000000c, 0x00000002, 
	0x00000003, 0x0000001e, 0x00000030, 0xfffffffc, 0xffffff8c, 0xffffff58, 0xffffffc3, 0x0000008a, 
	0x0000008a, 0xffffffc3, 0xffffff58, 0xffffff8c, 0xfffffffc, 0x00000030, 0x0000001e, 0x00000003, 
	0x00000002, 0x0000000c, 0x00000008, 0xfffffffe, 0xfffffff9, 0xfffffffc, 0x00000000, 0x00000000
};

// High pass filter @ 0Hz removes noise after pilot tone is squared
static const int HP_COEFF_TAPS = 32;
static const int HP_COEFFS[] =
{
	0xffffffff, 0x00000000, 0x00000000, 0x00000002, 0x00000004, 0x00000008, 0x0000000b, 0x0000000c, 
	0x00000008, 0xffffffff, 0xffffffee, 0xffffffd7, 0xffffffbb, 0xffffff9f, 0xffffff87, 0xffffff76, 
	0xffffff76, 0xffffff87, 0xffffff9f, 0xffffffbb, 0xffffffd7, 0xffffffee, 0xffffffff, 0x00000008, 
	0x0000000c, 0x0000000b, 0x00000008, 0x00000004, 0x00000002, 0x00000000, 0x00000000, 0xffffffff
};

static const int sin_lut[1024]=
{
	0x00000000, 0x00000006, 0x0000000C, 0x00000012, 0x00000019, 0x0000001F, 0x00000025, 0x0000002B, 
	0x00000032, 0x00000038, 0x0000003E, 0x00000045, 0x0000004B, 0x00000051, 0x00000057, 0x0000005E, 
	0x00000064, 0x0000006A, 0x00000070, 0x00000077, 0x0000007D, 0x00000083, 0x00000089, 0x00000090, 
	0x00000096, 0x0000009C, 0x000000A2, 0x000000A8, 0x000000AF, 0x000000B5, 0x000000BB, 0x000000C1, 
	0x000000C7, 0x000000CD, 0x000000D4, 0x000000DA, 0x000000E0, 0x000000E6, 0x000000EC, 0x000000F2, 
	0x000000F8, 0x000000FE, 0x00000104, 0x0000010B, 0x00000111, 0x00000117, 0x0000011D, 0x00000123, 
	0x00000129, 0x0000012F, 0x00000135, 0x0000013B, 0x00000141, 0x00000147, 0x0000014D, 0x00000153, 
	0x00000158, 0x0000015E, 0x00000164, 0x0000016A, 0x00000170, 0x00000176, 0x0000017C, 0x00000182, 
	0x00000187, 0x0000018D, 0x00000193, 0x00000199, 0x0000019E, 0x000001A4, 0x000001AA, 0x000001B0, 
	0x000001B5, 0x000001BB, 0x000001C1, 0x000001C6, 0x000001CC, 0x000001D2, 0x000001D7, 0x000001DD, 
	0x000001E2, 0x000001E8, 0x000001ED, 0x000001F3, 0x000001F8, 0x000001FE, 0x00000203, 0x00000209, 
	0x0000020E, 0x00000213, 0x00000219, 0x0000021E, 0x00000223, 0x00000229, 0x0000022E, 0x00000233, 
	0x00000238, 0x0000023E, 0x00000243, 0x00000248, 0x0000024D, 0x00000252, 0x00000257, 0x0000025C, 
	0x00000261, 0x00000267, 0x0000026C, 0x00000271, 0x00000275, 0x0000027A, 0x0000027F, 0x00000284, 
	0x00000289, 0x0000028E, 0x00000293, 0x00000298, 0x0000029C, 0x000002A1, 0x000002A6, 0x000002AB, 
	0x000002AF, 0x000002B4, 0x000002B8, 0x000002BD, 0x000002C2, 0x000002C6, 0x000002CB, 0x000002CF, 
	0x000002D4, 0x000002D8, 0x000002DC, 0x000002E1, 0x000002E5, 0x000002E9, 0x000002EE, 0x000002F2, 
	0x000002F6, 0x000002FA, 0x000002FF, 0x00000303, 0x00000307, 0x0000030B, 0x0000030F, 0x00000313, 
	0x00000317, 0x0000031B, 0x0000031F, 0x00000323, 0x00000327, 0x0000032B, 0x0000032E, 0x00000332, 
	0x00000336, 0x0000033A, 0x0000033D, 0x00000341, 0x00000345, 0x00000348, 0x0000034C, 0x0000034F, 
	0x00000353, 0x00000356, 0x0000035A, 0x0000035D, 0x00000361, 0x00000364, 0x00000367, 0x0000036B, 
	0x0000036E, 0x00000371, 0x00000374, 0x00000377, 0x0000037A, 0x0000037E, 0x00000381, 0x00000384, 
	0x00000387, 0x0000038A, 0x0000038C, 0x0000038F, 0x00000392, 0x00000395, 0x00000398, 0x0000039A, 
	0x0000039D, 0x000003A0, 0x000003A2, 0x000003A5, 0x000003A8, 0x000003AA, 0x000003AD, 0x000003AF, 
	0x000003B2, 0x000003B4, 0x000003B6, 0x000003B9, 0x000003BB, 0x000003BD, 0x000003BF, 0x000003C2, 
	0x000003C4, 0x000003C6, 0x000003C8, 0x000003CA, 0x000003CC, 0x000003CE, 0x000003D0, 0x000003D2, 
	0x000003D3, 0x000003D5, 0x000003D7, 0x000003D9, 0x000003DA, 0x000003DC, 0x000003DE, 0x000003DF, 
	0x000003E1, 0x000003E2, 0x000003E4, 0x000003E5, 0x000003E7, 0x000003E8, 0x000003E9, 0x000003EB, 
	0x000003EC, 0x000003ED, 0x000003EE, 0x000003EF, 0x000003F0, 0x000003F1, 0x000003F2, 0x000003F3, 
	0x000003F4, 0x000003F5, 0x000003F6, 0x000003F7, 0x000003F8, 0x000003F9, 0x000003F9, 0x000003FA, 
	0x000003FB, 0x000003FB, 0x000003FC, 0x000003FC, 0x000003FD, 0x000003FD, 0x000003FE, 0x000003FE, 
	0x000003FE, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 
	0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 0x000003FF, 
	0x000003FE, 0x000003FE, 0x000003FE, 0x000003FD, 0x000003FD, 0x000003FC, 0x000003FC, 0x000003FB, 
	0x000003FB, 0x000003FA, 0x000003F9, 0x000003F9, 0x000003F8, 0x000003F7, 0x000003F6, 0x000003F5, 
	0x000003F4, 0x000003F3, 0x000003F2, 0x000003F1, 0x000003F0, 0x000003EF, 0x000003EE, 0x000003ED, 
	0x000003EC, 0x000003EB, 0x000003E9, 0x000003E8, 0x000003E7, 0x000003E5, 0x000003E4, 0x000003E2, 
	0x000003E1, 0x000003DF, 0x000003DE, 0x000003DC, 0x000003DA, 0x000003D9, 0x000003D7, 0x000003D5, 
	0x000003D3, 0x000003D2, 0x000003D0, 0x000003CE, 0x000003CC, 0x000003CA, 0x000003C8, 0x000003C6, 
	0x000003C4, 0x000003C2, 0x000003BF, 0x000003BD, 0x000003BB, 0x000003B9, 0x000003B6, 0x000003B4, 
	0x000003B2, 0x000003AF, 0x000003AD, 0x000003AA, 0x000003A8, 0x000003A5, 0x000003A2, 0x000003A0, 
	0x0000039D, 0x0000039A, 0x00000398, 0x00000395, 0x00000392, 0x0000038F, 0x0000038C, 0x0000038A, 
	0x00000387, 0x00000384, 0x00000381, 0x0000037E, 0x0000037A, 0x00000377, 0x00000374, 0x00000371, 
	0x0000036E, 0x0000036B, 0x00000367, 0x00000364, 0x00000361, 0x0000035D, 0x0000035A, 0x00000356, 
	0x00000353, 0x0000034F, 0x0000034C, 0x00000348, 0x00000345, 0x00000341, 0x0000033D, 0x0000033A, 
	0x00000336, 0x00000332, 0x0000032E, 0x0000032B, 0x00000327, 0x00000323, 0x0000031F, 0x0000031B, 
	0x00000317, 0x00000313, 0x0000030F, 0x0000030B, 0x00000307, 0x00000303, 0x000002FF, 0x000002FA, 
	0x000002F6, 0x000002F2, 0x000002EE, 0x000002E9, 0x000002E5, 0x000002E1, 0x000002DC, 0x000002D8, 
	0x000002D4, 0x000002CF, 0x000002CB, 0x000002C6, 0x000002C2, 0x000002BD, 0x000002B8, 0x000002B4, 
	0x000002AF, 0x000002AB, 0x000002A6, 0x000002A1, 0x0000029C, 0x00000298, 0x00000293, 0x0000028E, 
	0x00000289, 0x00000284, 0x0000027F, 0x0000027A, 0x00000275, 0x00000271, 0x0000026C, 0x00000267, 
	0x00000261, 0x0000025C, 0x00000257, 0x00000252, 0x0000024D, 0x00000248, 0x00000243, 0x0000023E, 
	0x00000238, 0x00000233, 0x0000022E, 0x00000229, 0x00000223, 0x0000021E, 0x00000219, 0x00000213, 
	0x0000020E, 0x00000209, 0x00000203, 0x000001FE, 0x000001F8, 0x000001F3, 0x000001ED, 0x000001E8, 
	0x000001E2, 0x000001DD, 0x000001D7, 0x000001D2, 0x000001CC, 0x000001C6, 0x000001C1, 0x000001BB, 
	0x000001B5, 0x000001B0, 0x000001AA, 0x000001A4, 0x0000019E, 0x00000199, 0x00000193, 0x0000018D, 
	0x00000187, 0x00000182, 0x0000017C, 0x00000176, 0x00000170, 0x0000016A, 0x00000164, 0x0000015E, 
	0x00000158, 0x00000153, 0x0000014D, 0x00000147, 0x00000141, 0x0000013B, 0x00000135, 0x0000012F, 
	0x00000129, 0x00000123, 0x0000011D, 0x00000117, 0x00000111, 0x0000010B, 0x00000104, 0x000000FE, 
	0x000000F8, 0x000000F2, 0x000000EC, 0x000000E6, 0x000000E0, 0x000000DA, 0x000000D4, 0x000000CD, 
	0x000000C7, 0x000000C1, 0x000000BB, 0x000000B5, 0x000000AF, 0x000000A8, 0x000000A2, 0x0000009C, 
	0x00000096, 0x00000090, 0x00000089, 0x00000083, 0x0000007D, 0x00000077, 0x00000070, 0x0000006A, 
	0x00000064, 0x0000005E, 0x00000057, 0x00000051, 0x0000004B, 0x00000045, 0x0000003E, 0x00000038, 
	0x00000032, 0x0000002B, 0x00000025, 0x0000001F, 0x00000019, 0x00000012, 0x0000000C, 0x00000006, 
	0x00000000, 0xFFFFFFFA, 0xFFFFFFF4, 0xFFFFFFEE, 0xFFFFFFE7, 0xFFFFFFE1, 0xFFFFFFDB, 0xFFFFFFD5, 
	0xFFFFFFCE, 0xFFFFFFC8, 0xFFFFFFC2, 0xFFFFFFBB, 0xFFFFFFB5, 0xFFFFFFAF, 0xFFFFFFA9, 0xFFFFFFA2, 
	0xFFFFFF9C, 0xFFFFFF96, 0xFFFFFF90, 0xFFFFFF89, 0xFFFFFF83, 0xFFFFFF7D, 0xFFFFFF77, 0xFFFFFF70, 
	0xFFFFFF6A, 0xFFFFFF64, 0xFFFFFF5E, 0xFFFFFF58, 0xFFFFFF51, 0xFFFFFF4B, 0xFFFFFF45, 0xFFFFFF3F, 
	0xFFFFFF39, 0xFFFFFF33, 0xFFFFFF2C, 0xFFFFFF26, 0xFFFFFF20, 0xFFFFFF1A, 0xFFFFFF14, 0xFFFFFF0E, 
	0xFFFFFF08, 0xFFFFFF02, 0xFFFFFEFC, 0xFFFFFEF5, 0xFFFFFEEF, 0xFFFFFEE9, 0xFFFFFEE3, 0xFFFFFEDD, 
	0xFFFFFED7, 0xFFFFFED1, 0xFFFFFECB, 0xFFFFFEC5, 0xFFFFFEBF, 0xFFFFFEB9, 0xFFFFFEB3, 0xFFFFFEAD, 
	0xFFFFFEA8, 0xFFFFFEA2, 0xFFFFFE9C, 0xFFFFFE96, 0xFFFFFE90, 0xFFFFFE8A, 0xFFFFFE84, 0xFFFFFE7E, 
	0xFFFFFE79, 0xFFFFFE73, 0xFFFFFE6D, 0xFFFFFE67, 0xFFFFFE62, 0xFFFFFE5C, 0xFFFFFE56, 0xFFFFFE50, 
	0xFFFFFE4B, 0xFFFFFE45, 0xFFFFFE3F, 0xFFFFFE3A, 0xFFFFFE34, 0xFFFFFE2E, 0xFFFFFE29, 0xFFFFFE23, 
	0xFFFFFE1E, 0xFFFFFE18, 0xFFFFFE13, 0xFFFFFE0D, 0xFFFFFE08, 0xFFFFFE02, 0xFFFFFDFD, 0xFFFFFDF7, 
	0xFFFFFDF2, 0xFFFFFDED, 0xFFFFFDE7, 0xFFFFFDE2, 0xFFFFFDDD, 0xFFFFFDD7, 0xFFFFFDD2, 0xFFFFFDCD, 
	0xFFFFFDC8, 0xFFFFFDC2, 0xFFFFFDBD, 0xFFFFFDB8, 0xFFFFFDB3, 0xFFFFFDAE, 0xFFFFFDA9, 0xFFFFFDA4, 
	0xFFFFFD9F, 0xFFFFFD99, 0xFFFFFD94, 0xFFFFFD8F, 0xFFFFFD8B, 0xFFFFFD86, 0xFFFFFD81, 0xFFFFFD7C, 
	0xFFFFFD77, 0xFFFFFD72, 0xFFFFFD6D, 0xFFFFFD68, 0xFFFFFD64, 0xFFFFFD5F, 0xFFFFFD5A, 0xFFFFFD55, 
	0xFFFFFD51, 0xFFFFFD4C, 0xFFFFFD48, 0xFFFFFD43, 0xFFFFFD3E, 0xFFFFFD3A, 0xFFFFFD35, 0xFFFFFD31, 
	0xFFFFFD2C, 0xFFFFFD28, 0xFFFFFD24, 0xFFFFFD1F, 0xFFFFFD1B, 0xFFFFFD17, 0xFFFFFD12, 0xFFFFFD0E, 
	0xFFFFFD0A, 0xFFFFFD06, 0xFFFFFD01, 0xFFFFFCFD, 0xFFFFFCF9, 0xFFFFFCF5, 0xFFFFFCF1, 0xFFFFFCED, 
	0xFFFFFCE9, 0xFFFFFCE5, 0xFFFFFCE1, 0xFFFFFCDD, 0xFFFFFCD9, 0xFFFFFCD5, 0xFFFFFCD2, 0xFFFFFCCE, 
	0xFFFFFCCA, 0xFFFFFCC6, 0xFFFFFCC3, 0xFFFFFCBF, 0xFFFFFCBB, 0xFFFFFCB8, 0xFFFFFCB4, 0xFFFFFCB1, 
	0xFFFFFCAD, 0xFFFFFCAA, 0xFFFFFCA6, 0xFFFFFCA3, 0xFFFFFC9F, 0xFFFFFC9C, 0xFFFFFC99, 0xFFFFFC95, 
	0xFFFFFC92, 0xFFFFFC8F, 0xFFFFFC8C, 0xFFFFFC89, 0xFFFFFC86, 0xFFFFFC82, 0xFFFFFC7F, 0xFFFFFC7C, 
	0xFFFFFC79, 0xFFFFFC76, 0xFFFFFC74, 0xFFFFFC71, 0xFFFFFC6E, 0xFFFFFC6B, 0xFFFFFC68, 0xFFFFFC66, 
	0xFFFFFC63, 0xFFFFFC60, 0xFFFFFC5E, 0xFFFFFC5B, 0xFFFFFC58, 0xFFFFFC56, 0xFFFFFC53, 0xFFFFFC51, 
	0xFFFFFC4E, 0xFFFFFC4C, 0xFFFFFC4A, 0xFFFFFC47, 0xFFFFFC45, 0xFFFFFC43, 0xFFFFFC41, 0xFFFFFC3E, 
	0xFFFFFC3C, 0xFFFFFC3A, 0xFFFFFC38, 0xFFFFFC36, 0xFFFFFC34, 0xFFFFFC32, 0xFFFFFC30, 0xFFFFFC2E, 
	0xFFFFFC2D, 0xFFFFFC2B, 0xFFFFFC29, 0xFFFFFC27, 0xFFFFFC26, 0xFFFFFC24, 0xFFFFFC22, 0xFFFFFC21, 
	0xFFFFFC1F, 0xFFFFFC1E, 0xFFFFFC1C, 0xFFFFFC1B, 0xFFFFFC19, 0xFFFFFC18, 0xFFFFFC17, 0xFFFFFC15, 
	0xFFFFFC14, 0xFFFFFC13, 0xFFFFFC12, 0xFFFFFC11, 0xFFFFFC10, 0xFFFFFC0F, 0xFFFFFC0E, 0xFFFFFC0D, 
	0xFFFFFC0C, 0xFFFFFC0B, 0xFFFFFC0A, 0xFFFFFC09, 0xFFFFFC08, 0xFFFFFC07, 0xFFFFFC07, 0xFFFFFC06, 
	0xFFFFFC05, 0xFFFFFC05, 0xFFFFFC04, 0xFFFFFC04, 0xFFFFFC03, 0xFFFFFC03, 0xFFFFFC02, 0xFFFFFC02, 
	0xFFFFFC02, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 
	0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 0xFFFFFC01, 
	0xFFFFFC02, 0xFFFFFC02, 0xFFFFFC02, 0xFFFFFC03, 0xFFFFFC03, 0xFFFFFC04, 0xFFFFFC04, 0xFFFFFC05, 
	0xFFFFFC05, 0xFFFFFC06, 0xFFFFFC07, 0xFFFFFC07, 0xFFFFFC08, 0xFFFFFC09, 0xFFFFFC0A, 0xFFFFFC0B, 
	0xFFFFFC0C, 0xFFFFFC0D, 0xFFFFFC0E, 0xFFFFFC0F, 0xFFFFFC10, 0xFFFFFC11, 0xFFFFFC12, 0xFFFFFC13, 
	0xFFFFFC14, 0xFFFFFC15, 0xFFFFFC17, 0xFFFFFC18, 0xFFFFFC19, 0xFFFFFC1B, 0xFFFFFC1C, 0xFFFFFC1E, 
	0xFFFFFC1F, 0xFFFFFC21, 0xFFFFFC22, 0xFFFFFC24, 0xFFFFFC26, 0xFFFFFC27, 0xFFFFFC29, 0xFFFFFC2B, 
	0xFFFFFC2D, 0xFFFFFC2E, 0xFFFFFC30, 0xFFFFFC32, 0xFFFFFC34, 0xFFFFFC36, 0xFFFFFC38, 0xFFFFFC3A, 
	0xFFFFFC3C, 0xFFFFFC3E, 0xFFFFFC41, 0xFFFFFC43, 0xFFFFFC45, 0xFFFFFC47, 0xFFFFFC4A, 0xFFFFFC4C, 
	0xFFFFFC4E, 0xFFFFFC51, 0xFFFFFC53, 0xFFFFFC56, 0xFFFFFC58, 0xFFFFFC5B, 0xFFFFFC5E, 0xFFFFFC60, 
	0xFFFFFC63, 0xFFFFFC66, 0xFFFFFC68, 0xFFFFFC6B, 0xFFFFFC6E, 0xFFFFFC71, 0xFFFFFC74, 0xFFFFFC76, 
	0xFFFFFC79, 0xFFFFFC7C, 0xFFFFFC7F, 0xFFFFFC82, 0xFFFFFC86, 0xFFFFFC89, 0xFFFFFC8C, 0xFFFFFC8F, 
	0xFFFFFC92, 0xFFFFFC95, 0xFFFFFC99, 0xFFFFFC9C, 0xFFFFFC9F, 0xFFFFFCA3, 0xFFFFFCA6, 0xFFFFFCAA, 
	0xFFFFFCAD, 0xFFFFFCB1, 0xFFFFFCB4, 0xFFFFFCB8, 0xFFFFFCBB, 0xFFFFFCBF, 0xFFFFFCC3, 0xFFFFFCC6, 
	0xFFFFFCCA, 0xFFFFFCCE, 0xFFFFFCD2, 0xFFFFFCD5, 0xFFFFFCD9, 0xFFFFFCDD, 0xFFFFFCE1, 0xFFFFFCE5, 
	0xFFFFFCE9, 0xFFFFFCED, 0xFFFFFCF1, 0xFFFFFCF5, 0xFFFFFCF9, 0xFFFFFCFD, 0xFFFFFD01, 0xFFFFFD06, 
	0xFFFFFD0A, 0xFFFFFD0E, 0xFFFFFD12, 0xFFFFFD17, 0xFFFFFD1B, 0xFFFFFD1F, 0xFFFFFD24, 0xFFFFFD28, 
	0xFFFFFD2C, 0xFFFFFD31, 0xFFFFFD35, 0xFFFFFD3A, 0xFFFFFD3E, 0xFFFFFD43, 0xFFFFFD48, 0xFFFFFD4C, 
	0xFFFFFD51, 0xFFFFFD55, 0xFFFFFD5A, 0xFFFFFD5F, 0xFFFFFD64, 0xFFFFFD68, 0xFFFFFD6D, 0xFFFFFD72, 
	0xFFFFFD77, 0xFFFFFD7C, 0xFFFFFD81, 0xFFFFFD86, 0xFFFFFD8B, 0xFFFFFD8F, 0xFFFFFD94, 0xFFFFFD99, 
	0xFFFFFD9F, 0xFFFFFDA4, 0xFFFFFDA9, 0xFFFFFDAE, 0xFFFFFDB3, 0xFFFFFDB8, 0xFFFFFDBD, 0xFFFFFDC2, 
	0xFFFFFDC8, 0xFFFFFDCD, 0xFFFFFDD2, 0xFFFFFDD7, 0xFFFFFDDD, 0xFFFFFDE2, 0xFFFFFDE7, 0xFFFFFDED, 
	0xFFFFFDF2, 0xFFFFFDF7, 0xFFFFFDFD, 0xFFFFFE02, 0xFFFFFE08, 0xFFFFFE0D, 0xFFFFFE13, 0xFFFFFE18, 
	0xFFFFFE1E, 0xFFFFFE23, 0xFFFFFE29, 0xFFFFFE2E, 0xFFFFFE34, 0xFFFFFE3A, 0xFFFFFE3F, 0xFFFFFE45, 
	0xFFFFFE4B, 0xFFFFFE50, 0xFFFFFE56, 0xFFFFFE5C, 0xFFFFFE62, 0xFFFFFE67, 0xFFFFFE6D, 0xFFFFFE73, 
	0xFFFFFE79, 0xFFFFFE7E, 0xFFFFFE84, 0xFFFFFE8A, 0xFFFFFE90, 0xFFFFFE96, 0xFFFFFE9C, 0xFFFFFEA2, 
	0xFFFFFEA8, 0xFFFFFEAD, 0xFFFFFEB3, 0xFFFFFEB9, 0xFFFFFEBF, 0xFFFFFEC5, 0xFFFFFECB, 0xFFFFFED1, 
	0xFFFFFED7, 0xFFFFFEDD, 0xFFFFFEE3, 0xFFFFFEE9, 0xFFFFFEEF, 0xFFFFFEF5, 0xFFFFFEFC, 0xFFFFFF02, 
	0xFFFFFF08, 0xFFFFFF0E, 0xFFFFFF14, 0xFFFFFF1A, 0xFFFFFF20, 0xFFFFFF26, 0xFFFFFF2C, 0xFFFFFF33, 
	0xFFFFFF39, 0xFFFFFF3F, 0xFFFFFF45, 0xFFFFFF4B, 0xFFFFFF51, 0xFFFFFF58, 0xFFFFFF5E, 0xFFFFFF64, 
	0xFFFFFF6A, 0xFFFFFF70, 0xFFFFFF77, 0xFFFFFF7D, 0xFFFFFF83, 0xFFFFFF89, 0xFFFFFF90, 0xFFFFFF96, 
	0xFFFFFF9C, 0xFFFFFFA2, 0xFFFFFFA9, 0xFFFFFFAF, 0xFFFFFFB5, 0xFFFFFFBB, 0xFFFFFFC2, 0xFFFFFFC8, 
	0xFFFFFFCE, 0xFFFFFFD5, 0xFFFFFFDB, 0xFFFFFFE1, 0xFFFFFFE7, 0xFFFFFFEE, 0xFFFFFFF4, 0xFFFFFFFA, 
};


#endif
